%% Variable Definition

J = [66.66 0 0; 0 66.66 0;
    0 0 66.66]; %spacecraft moments of inertia
mu = 398600; %[km^3/s^2]
h = 700; %[km] initial orbit height (wrt Earth's surface) 
Re = 6371; %[km]
a = Re + h; %[km] Semi-major axis of the orbit
n = sqrt(mu/a^3);%[rad/s] angular rate of the spacecraft around the Earth

Td_prem = [1e-4; 1e-4; 1e-4]; %[N] preliminary simplified disturbance torque

T_max = 1;  % [Nm]
pointing_accuracy = deg2rad(2);  % [rad]
settling_time = 90;  % [s]

%% Optimisation with Homemade SLP

x0 = [0.5    ;  7  ; 0]; % No Beta (relaxation leads to instability in our case) 
% x0 = [0.1  ;  14]; 
lb = [0.2 ; 5.5 ; 0];
ub = [1.4 ; 14 ; inf];



nonlcon = @(x)simp_constraints(x, J, n, Td_prem, T_max, pointing_accuracy, ...
    settling_time);

lcon = @(x)dgslp(x, J, n, Td_prem, ...
    T_max, pointing_accuracy, settling_time);

dfun = @(x)dfslp(x, J, n, Td_prem, ...
    T_max, pointing_accuracy, settling_time);

fun = @(x)simp_del_ang_mom(x, J, n, Td_prem, T_max, pointing_accuracy, ...
    settling_time);

% x_opt = [0.1776 4.00]
% fun_opt = fun(x_opt)

% fprintf('Opt_func: %.4f\n', fun_opt);
%options = optimoptions('linprog','Algorithm','dual-simplex')

%x_opt = fmincon(fun,x0,A,b,Aeq,beq,lb,ub,nonlcon, options)



% Initialize variables


% Define convergence criteria
max_iterations = 100;   % Maximum number of iterations
tolerance = 8e-5;       % Convergence tolerance for the objective function

% Initialize iteration counter and objective function value
iteration = 0;
prev_obj_value = inf;
x = x0;

% Make a list to store the objective function and the x values at each iteration
obj_values = [inf];
x_values = [];

% Make a list to store the constraint values at each iteration
constraint_values = [];

% Make a moving trust window 
% (the trust window is the region where the linear approximation is valid)
% The trust window is centered at the current x value
% The trust window is a square with side length 2*trust_radius
trust_radius = [0.03; 0.03; 0.05];
k=10;
one = [-1 ; -1];

% Define solely the Kp and Kd variables 
x_var = [x(1); x(2)];
options = optimoptions('linprog','Algorithm','interior-point');
converge = 0;

while iteration < max_iterations
    % Solve the linear programming subproblem
    % Set the lower and upper bounds for the trust window
    x0=x;
    
    vals = nonlcon(x_var);
    
    % If the non-linear constraints are not satisfied at the current x value,
    % then the linear approximation is not valid, and the trust window is
    % expanded
    % if any(vals > 0)
    trust_radius = [0.03; 0.03; 0.05];
    % else
    %     trust_radius = [0.03; 0.03; 0.05];
    % end
    
    new_lb = max([x - trust_radius, lb], [] , 2);
    new_ub = min([x + trust_radius, ub], [] , 2);

    % Define objective coefficients for linear programming
    f = [dfun(x_var) , k];  
    
    % Define inequality constraints for linear programming
    A = [lcon(x_var) , one];  
    b = -vals' + lcon(x)*x_var ;  
    
    % Define equality constraints for linear programming
    Aeq = [];  
    beq = [];  
    


    % Solve the linear programming problem
    [x, obj_value, exitflag, output] = linprog(f, A, b, Aeq, beq, new_lb, new_ub,options);
    
    
    if exitflag == -2
       x = x0;
       x_var = [x(1); x(2)];
       obj_value = fun(x_var);
       % Save x and objective function value for plotting
       x_values = [x_values , x_var];
       obj_values = [obj_values , fun(x_var)];
    
        % Save constraint values for plotting
       constraint_values = [constraint_values; nonlcon(x_var)];
       break ; 
    end
    
    x_var = [x(1); x(2)]
    obj_value = fun(x_var);
    % Save x and objective function value for plotting
    x_values = [x_values , x_var];
    obj_values = [obj_values , fun(x_var)];

    % Save constraint values for plotting
    constraint_values = [constraint_values; nonlcon(x_var)];
    % Check convergence criteria
    if abs(constraint_values(end) ) < tolerance 
        converge = 1;
        fprintf('Convergence achieved!\n');

        break;  % Convergence achieved, exit the loop
     
    end


    % Update iteration counter and previous objective function value
    iteration = iteration + 1;

end
optimal_Kp = x(1);
optimal_Kd = x(2);

answers = [exitflag ,  converge , iteration , optimal_Kd , optimal_Kp , obj_value];


% % Display results
fprintf('Optimal Solution:\n');
fprintf('Kp: %.4f\n', optimal_Kp);
fprintf('Kd: %.4f\n', optimal_Kd);

% Make a meshgrid with the lb and ub values for each variable
[xq,yq] = meshgrid(lb(1):0.01:ub(1), lb(2):0.01:ub(2));

% Plot the constraint values per constraint (2D array) as a function of the x (2D array) values, 
% so it has to be a 2D colormap for each constraint
c_tau = constraint_values(:, 1);
c_acc = constraint_values(:, 2);
c_tau_surf = griddata(x_values(1, :), x_values(2, :), c_tau, xq, yq);
c_acc_surf = griddata(x_values(1, :), x_values(2, :), c_acc, xq, yq);

figure(1);
% Color map for constraint 1 at each combination of x(1) and x(2) value
plot3(xq, yq, c_tau_surf);
xlabel('Kp');
ylabel('Kd');
zlabel('Constraint 1');
title('Constraint 1 vs. Kp and Kd');
colorbar;
figure(2);
% Color map for constraint 2 at each combination of x(1) and x(2) value
plot3(xq, yq, c_acc_surf);
xlabel('Kp');
ylabel('Kd');
zlabel('Constraint 2');
title('Constraint 2 vs. Kp and Kd');
colorbar;

% Show the objective function value per iteration
figure(3);
plot(obj_values);
xlabel('Iteration');
ylabel('Objective Function Value');
title('Objective Function Value vs. Iteration');
